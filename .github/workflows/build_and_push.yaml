name: Build and Push Docker Image

on:
  push:
    tags:
      - "*"

permissions:
  contents: read
  packages: write

jobs:
  check_quality:
    runs-on: ubuntu-latest
    env:
      GOTOOLCHAIN: go1.24.4

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check formatting w/ gofmt
        run: |
          gofmt -l -s -w .
          git diff --exit-code

      - name: Check go.mod is clean
        run: |
          go mod tidy
          git diff --exit-code

      - name: Run go generate
        run: |
          export PATH="$(go env GOPATH)/bin:$PATH"
          # Install controller-gen
          go get sigs.k8s.io/controller-tools/cmd/controller-gen
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
          # Run code generation
          go generate ./...
          # Remove the new dependency
          go mod tidy

      - name: Run go vet
        run: |
          go vet ./...

      - name: Run Gosec Security Scanner
        uses: securego/gosec@v2.22.3
        env:
          GOROOT: ""
        with:
          args: ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"

      - name: Run govulncheck
        run: |
          # Install govulncheck
          go install golang.org/x/vuln/cmd/govulncheck@latest
          # Update path
          export PATH="$(go env GOPATH)/bin:$PATH"
          govulncheck ./...

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check go.mod is clean
        run: |
          go mod tidy
          git diff --exit-code

      - name: Run go generate
        run: |
          export PATH="$(go env GOPATH)/bin:$PATH"
          # Install controller-gen
          go get sigs.k8s.io/controller-tools/cmd/controller-gen
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
          # Run code generation
          go generate ./...
          # Remove the new dependency
          go mod tidy

      - name: Test code
        run: go test ./...

  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - check_quality
      - test

    steps:
      - name: Check tag name formatting (semver)
        run: |
          echo "Checking that ${{ github.ref_name }} starts with 'v' and then a valid semver number"
          echo "${{ github.ref_name }}" | grep -Eq "^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+)?$"
          TAGNAME=$(echo "${{ github.ref_name }}" | sed "s/^v//")
          echo "TAG=$TAGNAME" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run go generate
        run: |
          export PATH="$(go env GOPATH)/bin:$PATH"
          # Install controller-gen
          go get sigs.k8s.io/controller-tools/cmd/controller-gen
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
          # Run code generation
          go generate ./...
          # Remove the new dependency
          go mod tidy

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Build and push Docker images
        run: |
          BASE=ghcr.io/${{ github.repository }}
          IMAGENAME="$BASE:${{ env.TAG }}"
          MAJOR_VERSION=$(echo "${{ env.TAG }}" | cut -d '.' -f 1)
          MINOR_VERSION=$(echo "${{ env.TAG }}" | cut -d '.' -f 2)
          docker buildx build --push --platform linux/amd64,linux/arm/v6,linux/arm64 -t $IMAGENAME -t "$BASE:$MAJOR_VERSION" -t "$BASE:$MAJOR_VERSION.$MINOR_VERSION" -t "$BASE:latest" .
