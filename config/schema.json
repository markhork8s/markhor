{
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "object",
    "title": "Markhor configuration schema",
    "description": "Schema for the configuration file of Markhor (github.com/civts/markhor)",
    "additionalProperties": false,
    "properties": {
        "kubernetes": {
            "type": "object",
            "description": "Config options relative to kubernetes",
            "additionalProperties": false,
            "properties": {
                "kubeconfigPath": {
                    "type": "string",
                    "description": "Path to the file containing the information necessary to connect with the kubernetes cluster (More info at https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/). If Markhor will run inside the cluster, leave it unspecified so it uses the default value of \"\".",
                    "default": "",
                    "examples": [
                        "/var/k8s_configs/my_cluster_01.conf"
                    ]
                },
                "clusterTimeoutSeconds": {
                    "type": "integer",
                    "description": "The amount of time, in seconds, that Markhor should wait when connecting to the cluster before timing out.",
                    "default": 10,
                    "minimum": 0
                }
            }
        },
        "healthcheck": {
            "description": "Configuration for the healthcheck endpoint(s)",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "port": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535,
                    "default": 8000,
                    "description": "The port number where the healthcheck endpoint should listen on"
                },
                "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Wether to enable the healthcheck or not"
                }
            }
        },
        "admissionController": {
            "description": "Configuration for the Markhor admission controller",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "port": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535,
                    "default": 443,
                    "description": "The port number where the admission controller should listen on"
                },
                "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Wether to enable the admission controller or not"
                }
            }
        },
        "tls": {
            "type": "object",
            "description": "The TLS configuration. This is mandatory for using the admission controller -unless you expose the service with in https in some other way like a service mesh-",
            "properties": {
                "mode": {
                    "type": "string",
                    "default": "external",
                    "enum": [
                        "file",
                        "external"
                    ],
                    "description": "Valid velues are \"file\" and \"external\". If \"file\" is specified, it means that markhor will terminate the TLS connections, using the certificate and key files provided in this config file. On the other hand, \"external\" indicates that a process external to markhor handles the TLS -for example, the sidecar pod in a service mesh or a reverse proxy-. Therefore, if  \"external\" is speficied, markhor exposes its endpoints as HTTP"
                },
                "certPath": {
                    "type": "string",
                    "description": "Path (seen from inside the Markhor pod) where the TLS certificate file is stored.",
                    "default": "/etc/markhor/tls/tls.crt"
                },
                "keyPath": {
                    "type": "string",
                    "description": "Path (seen from inside the Markhor pod) where the TLS private key file is stored.",
                    "default": "/etc/markhor/tls/tls.key",
                    "minLength": 1
                }
            },
            "required": [
                "mode"
            ],
            "additionalProperties": false
        },
        "logging": {
            "type": "object",
            "description": "Configuring the logs of the Markhor program",
            "additionalProperties": false,
            "properties": {
                "level": {
                    "type": "string",
                    "description": "The verbosity of the logs (see https://github.com/sirupsen/logrus?tab=readme-ov-file#level-logging)",
                    "enum": [
                        "info",
                        "warning",
                        "error",
                        "debug"
                    ],
                    "default": "info"
                },
                "style": {
                    "type": "string",
                    "description": "The format of the logs (as provided by slog)",
                    "enum": [
                        "text",
                        "json"
                    ],
                    "default": "text"
                },
                "logToStdout": {
                    "type": "boolean",
                    "description": "Wether to log the output of this program to stdout",
                    "default": true
                },
                "additionalLogFiles": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "Path to the file where the logs should be written to",
                        "minLength": 1
                    },
                    "uniqueItems": true,
                    "minLength": 1,
                    "default": []
                }
            }
        },
        "behavior": {
            "description": "General behavior of Markhor",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "fieldmanager": {
                    "type": "object",
                    "description": "Configuration related to the kubernetes field management. See the latest docs https://kubernetes.io/docs/reference/using-api/server-side-apply/#field-management or the version when I wrote this https://github.com/kubernetes/website/blob/snapshot-initial-v1.29/content/en/docs/reference/using-api/server-side-apply.md#field-management",
                    "additionalProperties": false,
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the field manager that Markhor will give to kubernetes",
                            "minLength": 1,
                            "default": "github.com/civts/markhor"
                        },
                        "forceUpdates": {
                            "type": "boolean",
                            "description": "If this is inactive -default-, Markhor will not modify secrets which have another fieldmanager -e.g., the ones created by the admins or other apps-. On the contrary, if this is active, Markhor will take over the field manager -overriding existing secrets-. In any case, when the field manager mismatches, a warning is printed.",
                            "default": false
                        }
                    }
                },
                "pruneDanglingMarkhorSecrets": {
                    "type": "boolean",
                    "description": "If enabled, Markhor will delete all the Secrets which do not have a corresponding MarkhorSecret",
                    "default": true
                },
                "namespaces": {
                    "type": "array",
                    "description": "List of all the namespaces where Markhor is allowed to operate in. An empty list -the default- signifies that Markhor will operate on all namespaces",
                    "items": {
                        "description": "The name of a kubernetes namespace where Markhor will operate",
                        "type": "string",
                        "minLength": 1
                    },
                    "default": [],
                    "uniqueItems": true
                },
                "excludedNamespaces": {
                    "type": "array",
                    "description": "List of all the namespaces where Markhor is forbidden to operate in. This has higher priority than the \"namespaces\" field.",
                    "items": {
                        "description": "The name of a kubernetes namespace where Markhor will not operate",
                        "type": "string",
                        "minLength": 1
                    },
                    "default": [],
                    "uniqueItems": true
                }
            }
        },
        "markorSecrets": {
            "type": "object",
            "description": "Configuration options relative to the MarkhorSecret objects themselves (essentially, the markhorParams key)",
            "additionalProperties": false,
            "properties": {
                "hierarchySeparator": {
                    "type": "object",
                    "description": "Options for the character/string that represents hierarchy in the markhorParams>order array in a MarkhorSecret manifest",
                    "additionalProperties": false,
                    "properties": {
                        "default": {
                            "type": "string",
                            "description": "Which character (or string) is used as a marker for indentation in markhorParams>order. The dafault value is \"/\", meaning that the string \"a/b\" indicates a property that in JSON would be \"a\":{\"b\":\"some-value\"} while \"a.b\" indicates a property that in JSON would be \"a.b\":\"some-value\"",
                            "default": "/",
                            "minLength": 1
                        },
                        "allowOverride": {
                            "type": "boolean",
                            "description": "If false -default-, a MarkhorSecret manifest cannot override the value of the hierarchy separator defined in this configuration file -and a warning is printed if it tries to do so-.",
                            "default": false
                        },
                        "warnOnOverride": {
                            "type": "boolean",
                            "description": "Wether to print a warning when a MarkhorSecret manifest overrides the value of the hierarchy separator defined in this configuration file. Defaults to true",
                            "default": true
                        }
                    }
                },
                "managedLabel": {
                    "type": "object",
                    "description": "Markhor adds a custom label to the Secrets it manages. Here, it is possible to configure it.",
                    "additionalProperties": false,
                    "properties": {
                        "default": {
                            "type": "string",
                            "description": "The name of the label that Markhor adds to the Secrets it manages. https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels",
                            "default": "app.kubernetes.io/managed-by",
                            "minLength": 1
                        },
                        "allowOverride": {
                            "type": "boolean",
                            "description": "If false -default-, a MarkhorSecret manifest cannot override the value of the custom label defined in this configuration file -and a warning is printed if it tries to do so-.",
                            "default": false
                        },
                        "warnOnOverride": {
                            "type": "boolean",
                            "description": "Wether to print a warning when a MarkhorSecret manifest overrides the value of the custom label defined in this configuration file. Defaults to true",
                            "default": true
                        }
                    }
                }
            }
        }
    }
}